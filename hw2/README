/*********************************************************
* Homework 2: Linked Lists
* Comp 15 Spring 2019 
* README
* Author: Alyssa Rose
*
*********************************************************/

Compile/run: Compile using "make train-conductor", run executable with
"./train-conductor"

Program Purpose: This homework assignment covers linked lists. The station
class must be implemented with: a parameterized constructor, isEqual, and
Print. The LinkedList class must also be implemented with: A standard
destructor, insertStation, removeStation, makeEmpty, Print, and 
getNextStation. 

Acknowledgements: I used lecture slides and looked at previous homeworks
from comp11 to refresh linked list concepts

Files: 

train-conductor.cpp: Fully implemented driver. Opens a file, reads in
station names, and inserts them into a linked list (along with deleting)
a few. 

LinkedList.cpp: Implementation of a standard LinkedList class. To be written 
in this class by the student are a destructor, insertStation,
removeStation, makeEmpty, Print, and getNextStation. 

LinkedList.h: Interface of LinkedList class.

NodeType.h: Small struct defining a unit of information for the LinkedList class.

Station.cpp: Station class implementation to be implemented by the student.
Write a default constructor, parameterized constructor, print, isEqual,
getAccess, and getName.

Station.h: Station class interface to be written by the student. 

glx.txt: Text file of stations with Y/N accessibility.

reference_all_stations.txt: Reference implementation of result printing
the ontouched list after insertion. It will be in reverse order of insert.
Can be used with diff to test correctness of student program. 

reference_remove_some.txt: Reference implementation of result after
removing some stations. Can be used with diff to test correctness of
student program.

Data Structures: The main data structure of this lab is a singly linked list.
Inserting into a linked list is O(1), as an element can either be inserted
at the head or tail. Access is O(n), because worst case the element that is
being looked for is the last element in the list. A linked list is useful
because it can be used dynamically and it is easy to insert and delete.

Testing: Testing was done most heavily on getNextStation() and 
removeStation() as they had the most edge cases. Bugs encountered during 
testing of getNextStation was information loss (i.e. station names being 
NoName instead of their actual names) and updating currPos. The case in 
which currPos was at the last node was tested multiple times to ensure 
that it would be function even when currPos -> next = NULL. 
The cases that were tested for removeStation included when the station to 
be removed was the first, in the middle, or at the last position. The case 
in which the station wasn't present in the list of if the list was only 1 
or 0 nodes long were also considered, which led to fixing to the flow 
of my conditional statements as bugs appeared.

Note: This homework comes partially implemented. 
